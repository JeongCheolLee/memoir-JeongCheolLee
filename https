


![image](https://d1ccleacxg8gcm.cloudfront.net/JeongCheolLee/images/ffab1jjgh3aa.png)
# 개요

-----------

백엔드 개발자로 살아오며 클라이언트와 수없이 많은 HTTP/HTTPS 통신을 해왔습니다.
그러나 부끄럽게도, https는 http + tls 이며, 데이터의 암호화 과정이 들어간다는 정도로 알고 있었고,
그 과정 자체에 대한 내용은 잘 모르고 있었습니다.

"그냥 URL 앞에 **s**를 붙였을 뿐인데... 어떻게 그게 안전해지고 암호화가 된다는 거야?! 🤔"
에 대한 이야기입니다.

# 본문
-----------

결론부터 말하자면,
브라우저(크롬, 사파리 등)가 다~ 알아서 해주기 때문에 우리는 신경쓰지 않아도 되었던 것입니다. 🙌
(서버 to 서버 통신이라면 axios 같은 HTTP 라이브러리가 알아서 처리해줍니다.)

이 암호화에 TLS 핸드셰이크라는 과정이 필요한데,
다음 순서로 진행됩니다.

TLS 핸드셰이크의 여정 🌐🔒
1. 브라우저가 https로 요청
브라우저가 https로 요청을 보내면,
서버는 “암호화된 HTTPS 통신을 원하네!”라고 인지합니다.

2. SSL 인증서 다운로드
서버는 자신의 SSL 인증서를 클라이언트에게 보내고, 여기엔 암호화에 필요한 서버의 공개키가 포함되어 있습니다.

3. 신뢰성 검증
브라우저는 받은 인증서를 열어보며 이 인증서는 신뢰할 수 있는 기관에서 발급된 것인지 확인합니다.
(브라우저에 신뢰할 수 있는 인증기관 목록을 가지고 있습니다.)

4. 세션 키 생성
브라우저는 세션 키라는 임의 문자열을 만들어냅니다.
이 키를 서버의 공개키로 암호화해 서버에 보냅니다.

5. 서버의 복호화
서버는 자신의 개인키를 사용해 세션 키를 복호화합니다.
이제 브라우저와 서버는 세션 키를 공유하게 됩니다.

6. 대칭키 암호화 시작
이 세션 키를 대칭키로 사용해 데이터를  암/복호화합니다.
같은 키를 사용해 암/복호화를 처리하므로 속도도 빠르고 효율적입니다.

7. 안전한 데이터 전송
이후 브라우저와 서버 간 통신은 모두 암호화 상태로 진행됩니다.

양 끝단에서 암/복호화가 진행되기 때문에 중간에서 패킷을 가로채도 복호화가 불가능해지며,
안전한 통신을 할 수 있게됩니다. 🔐

정리하자면...
고마워요 크롬, 사파리, 엣지! 🙏